#Make a virtual envirionment and set it up
virtualenv -p python3.9 venv
source venv/bin/activate
pip install hydra-genetics

pip install snakemake
pip install -r requirements.txt
pip install pysam
module load slurm-drmaa
module load bcbio-nextgen
pip install --upgrade hydra_genetics
pip install --upgrade snakemake
pip install --upgrade pip
pip install snakefmt
pip install drmaa


# Make a new line based on hydra genetics by:
# hydra-genetics create-module

#To run the pipeline with slurm or without slurm
# -s where is the Snakefile, -d which is the working directory
# units.tsv and sample.tsv should be in working directory


snakemake --profile marvin -s workflow/Snakefile --configfile config/config.yaml --notemp


snakemake -n -s workflow/Snakefile -d config/ --use-singularity --singularity-args " -B /projects -B /beegfs-storage -B /scratch -B /data "
snakemake --core 1 -s ../workflow/Snakefile --use-singularity --singularity-args " -B /projects -B /beegfs-storage -B /scratch -B /data "


#Check snakemake code (snakefmt)
snakefmt --compact-diff -l 130 workflow/
#Check python code (pycodestyle)
pycodestyle --max-line-length=130 --statistics workflow/scripts/
#Run pytest
python -m pytest workflow/scripts/XXX_test.py
#Lint
cd .tests/integration
snakemake --lint -s ../../workflow/Snakefile --configfile config.yaml
#Dryrun
cd .tests/integration
snakemake -n -s ../../workflow/Snakefile --configfile config.yaml
#Testrun
cd .tests/integration
snakemake -c 2 --use-conda -s ../../workflow/Snakefile --configfile config.yaml
snakemake -s ../../workflow/Snakefile -j 2 --use-singularity --singularity-args "-e --cleanenv" --configfile config.yaml


hydra-genetics create-input-files -d /projects/wp3/nobackup/WGS/delivery02326/RL-2047 -t N --tc 0.0


snakemake -np call/all.vcf
snakemake --cores 1 call/all.vcf
snakemake --dag call/all.vcf | dot -Tsvg > dag.svg
