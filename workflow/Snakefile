__author__ = "Jessika Nordin"
__copyright__ = "Copyright 2022, Jessika Nordin"
__email__ = "jessika.nordin@scilifelab.uu.se"
__license__ = "GPL-3"


include: "rules/common.smk"


report: "report/workflow.rst"


rule all:
    input:
        unpack(compile_output_list),
        ["vcf_final/%s.vcf.gz" % sample for sample in get_samples(samples)],
        "qc/multiqc/MultiQC.html",
#        ["cnv_sv/manta_run_workflow_t/%s/results/variants/SV.vcf.gz" % sample for sample in get_samples(samples)],


module prealignment:
    snakefile:
        github("hydra-genetics/prealignment", path="workflow/Snakefile", tag=config["modules"]["prealignment"],)
    config:
        config


use rule * from prealignment as prealignment_*


module parabricks:
    snakefile:
        github("hydra-genetics/parabricks", path="workflow/Snakefile", tag=config["modules"]["parabricks"],)
    config:
        config


use rule pbrun_fq2bam from parabricks as pbrun_fq2bam with:
    input:
        fastq=lambda wildcards: get_in_fastq(units, wildcards),
        fasta=config["reference"]["fasta"],
        sites=config["reference"]["sites"],
    params:
        extra=config.get("pbrun_fq2bam", {}).get("extra", ""),
        in_fq=get_in_fq,
        num_gpus=lambda wildcards: get_num_gpus("pbrun_fq2bam", wildcards),


use rule pbrun_deepvariant from parabricks as pbrun_deepvariant with:


include: "rules/add_ref_to_vcf.smk"

include: "rules/peddy.smk"


module qc:
    snakefile:
        github("hydra-genetics/qc", path="workflow/Snakefile", tag=config["modules"]["qc"],)
    config:
        config

use rule multiqc from qc as qc_multiqc with:
    output:
        html="qc/multiqc/MultiQC.html",
        sata=directory("qc/multiqc/MultiQC_data"),

use rule fastqc from qc as qc_fastqc

use rule picard_collect_alignment_summary_metrics from qc as qc_pic_align_sum_met with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],

use rule picard_collect_duplication_metrics from qc as qc_pic_dup_met with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",

use rule picard_collect_gc_bias_metrics from qc as qc_pic_gc_met with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],

use rule picard_collect_hs_metrics from qc as qc_pic_hs_met with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        bait_intervals=config["reference"]["design_intervals"],
        target_intervals=config["reference"]["design_intervals"],
        reference=config["reference"]["fasta"],

use rule picard_collect_insert_size_metrics from qc as qc_pic_ins_size with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",

use rule picard_collect_multiple_metrics from qc as qc_pic_multi_met with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],

use rule picard_collect_wgs_metrics from qc as qc_pic_wgs_met with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],
        interval=config.get("reference", {}).get("wgs_intervals", ""),

use rule samtools_stats from qc as qc_samtools_stats with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",

# use rule samtools_idxstats from qc as qc_samtools_idxstats with:
#     input:
#         bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
#         bai="parabricks/pbrun_fq2bam/{sample}_{type}.bam.bai",
#     output:
#         "qc/samtools_idxstats/{sample}_{type}.samtools-idxstats.txt"

use rule mosdepth_bed from qc as qc_mosdepth_bed with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        bai="parabricks/pbrun_fq2bam/{sample}_{type}.bam.bai",
        bed=config.get("reference", {}).get("design_bed", ""),
    output:
        bed=temp("qc/mosdepth_bed/{sample}_{type}.regions.bed.gz"),
        bed_csi=temp("qc/mosdepth_bed/{sample}_{type}.regions.bed.gz.csi"),
        glob=temp("qc/mosdepth_bed/{sample}_{type}.mosdepth.global.dist.txt"),
        region=temp("qc/mosdepth_bed/{sample}_{type}.mosdepth.region.dist.txt"),
        summary=temp("qc/mosdepth_bed/{sample}_{type}.mosdepth.summary.txt"),


# module cnv_sv:
#     snakefile:
#         github("hydra-genetics/cnv_sv", path="workflow/Snakefile", tag=config["modules"]["cnv_sv"],)
#     config:
#         config
#
# use rule manta from cnv_sv as cnv_sv_manta with:
#     input:
#         bam_n="parabricks/pbrun_fq2bam/{sample}_N.bam",
#         bai_n="parabricks/pbrun_fq2bam/{sample}_N.bam.bai",
#         ref=config["reference"]["fasta"],
#
# use rule manta_run_workflow_n from cnv_sv as cnv_sv_manta_run

# use rule gatk_cnv_collect_read_counts from cnv_sv as gatk_cnv with:
#     input:
#         bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
#         bai="parabricks/pbrun_fq2bam/{sample}_{type}.bam.bai",
#         interval=config.get("reference", {}).get("design_intervals_gatk_cnv", ""),
