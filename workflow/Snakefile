#rule NAME:
#    input: "path/to/inputfile", "path/to/other/inputfile"
#    output: "path/to/outputfile", "path/to/another/outputfile"
#    shell: "somecommand {input} {output}"


configfile: "config.yaml"

rule bwa_map:
    input:
        ref=config['genomic_ref'],
        fq1="/projects/wp3/nobackup/WGS/MGI/V300043112_WGS_20201023/fastq/{sample}_R1.fastq.gz",
        fq2="/projects/wp3/nobackup/WGS/MGI/V300043112_WGS_20201023/fastq/{sample}_R2.fastq.gz"
    output:
        "mapped_reads/{sample}.bam"
    shell:
        "bwa mem {input.ref} {input.fq1} {input.fq2} | samtools view -Sb - > {output}"


rule samtools_sort:
    input:
        "mapped_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam"
    shell:
        "samtools sort -T sorted_reads/{wildcards.sample}.bam "
        "-O bam {input} > {output}"


rule samtools_index:
    input:
        "sorted_reads/{sample}.bam"
    output:
        "sorted_reads/{sample}.bam.bai"
    shell:
        "samtools index {input}"


rule deepvariant:
    input:
        ref = config['genomic_ref'],
        reads = "sorted_reads/{sample}.bam"
    output:
        ovcf = 'deepvariant/{sample}.vcf.gz',
        ogvcf = 'deepvariant/{sample}.g.vcf.gz',
        ird = directory('intermediate/{sample}')
    threads:
        8
    singularity:
        config['images']['deepvariant']
    log:
        '{sample}/log.txt'
    shell:
        "/opt/deepvariant/bin/run_deepvariant \
        --model_type=WGS \
        --ref={input.ref} \
        --reads={input.reads} \
        --output_vcf={output.ovcf} \
        --output_gvcf={output.ogvcf} \
        --intermediate_results_dir {output.ird} \
        --num_shards={threads} > {log} 2>&1"


rule get_1000g_pos:
    input:
        vcf="deepvariant/{sample}.g.vcf.gz",
        bed="/projects/wp3/nobackup/Workspace/PEDDY/1000G.bed"
    output:
        "calls/{sample}_1000g.vcf.gz"
    shell:
        "vcftools --gzvcf {input.vcf} --bed {input.bed} --recode --recode-INFO-all --out {output}"


rule combine_vcf:
    input:
        vcf=expand("calls/{sample}_1000g.vcf.gz", sample=config["samples"])
    output:
        "calls/all.vcf.gz"
    shell:
        "vcf-merge {input.vcf} | bgzip -c > {output}"


rule peddy:
    input:
        vcf="calls/all.vcf.gz",
        ped="calls/all.ped"
    output:
        "all"
    shell:
        "/opt/ohpc/pub/pipelines/bcbio-nextgen/1.2.3/usr/local/bin/peddy -p 8 --plot --prefix {output} {input.vcf} {input.ped}"


rule all:
    input:
        "deepvariant/A.g.vcf.gz"
